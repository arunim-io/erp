[project]
name = "erp"
version = "0.1-dev"
requires-python = ">=3.12"
dependencies = [
  "django-allauth[mfa]>=65.3.0",
  "django-ninja>=1.3.0",
  "django>=5.1.4",
]

[[project.authors]]
name = "Mugdha Arunim Ahmed"
email = "mugdhaarunimahmed2017@gmail.com"

[dependency-groups]
dev = []
typing = ["django-stubs[compatible-mypy]>=5.1.1", "mypy>=1.13.0"]
test = ["pytest>=8.3.4", "pytest-cov>=6.0.0", "pytest-django>=4.9.0"]

[tool.uv]
default-groups = ["dev", "typing", "test"]

[tool.basedpyright]
typeCheckingMode = "basic"
venvPath = "."
venv = ".venv"
exclude = [".venv"]

[tool.ruff]
extend-exclude = ["manage.py", "**/migrations/**/*.py"]
preview = true
show-fixes = true
target-version = "py312"
unsafe-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "F",   # pyflakes
  "E",   # pycodestyle
  "W",   # pycodestyle
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  # "D", # pydocstyle
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "COM",   # flake8-commas
  # "CPY", # flake8-copyright
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger
  "DJ",   # flake8-django
  "EM",   # flake8-errmsg
  "EXE",  # flake8-executable
  "FA",   # flake8-future-annotations
  'ISC',  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "LOG",  # flake8-logging
  "G",    # flake8-logging-format
  'INP',  # flake8-no-pep420
  'PIE',  # flake8-pie
  "T20",  # flake8-print
  'PYI',  # flake8-pyi
  'PT',   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT",  # flake8-gettext
  # "ARG", # flake8-unused-arguments: Unused function argument
  "PTH", # flake8-use-pathlib
  "TD",  # flake8-todos
  "FIX", # flake8-fixme
  "ERA", # eradicate
  "PD",  # pandas-vet
  "PGH", # pygrep-hooks
  "PL",  # Pylint
  "TRY", # tryceratops
  "FLY", # flynt
  # "NPY", # NumPy-specific rules
  # "FAST", # FastAPI
  # "AIR", # Airflow
  "PERF", # Perflint
  # "FURB", # refurb
  # "DOC", # pydoclint
  "RUF", # Ruff-specific rules
]
ignore = [
  "COM812", # missing-tailing-comma: conflicts with ruff format
  "ISC001", # single-line-implicit-string-concatenation: conflicts with ruff format
  "RUF012", # mutable-class-default: annoying to fix
  "SIM102", # collapsible-if: sometimes it's better to nest
]
unfixable = ["F401"]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
detect-same-package = true
force-sort-within-sections = true
force-wrap-aliases = true

[tool.ruff.lint.extend-per-file-ignores]
"settings.py" = ["E501"]
"tests.py" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "PT004",   # Fixture does not return anything, add leading underscore
  "PT011",   # pytest.raises() block should contain a single simple statement
]
"*_tests.py" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "PT004",   # Fixture does not return anything, add leading underscore
  "PT011",   # pytest.raises() block should contain a single simple statement
]
"test_*.py" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "PT004",   # Fixture does not return anything, add leading underscore
  "PT011",   # pytest.raises() block should contain a single simple statement
]
"tests/**.py" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "PT004",   # Fixture does not return anything, add leading underscore
  "PT011",   # pytest.raises() block should contain a single simple statement
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
pythonpath = [".", "src"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = '--cov --cov-report=html --cov-report=term'
log_cli = true

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = ["*/migrations/*", "*/tests/*", "*/conftest.py"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "raise NotImplementedError",
  "pass",
  "if __name__ == .__main__.:",
]

[tool.mypy]
exclude = ["manage.py"]
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "config.settings"
